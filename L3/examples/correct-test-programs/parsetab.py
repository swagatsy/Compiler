
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftASTERISKDIVIDErightUMINUSnonassocIFXnonassocELSENAME MAIN NUMBER INT NEWLINE VOID COMMA PLUS MINUS DIVIDE SEMICOLON PERCENTAGE LPAREN RPAREN EQUALS LTHAN GTHAN LBRACE RBRACE UMINUS EXCLAIM IF IFX ELSE WHILE ASTERISK AMPERSAND\n\tcprog : VOID MAIN arguments main_body\n\t\n\targuments : LPAREN params RPAREN\n\t\t\t  | LPAREN RPAREN\n\t\n\tparams : NAME varlist \n\t\n\tmain_body : LBRACE stmt_list RBRACE\n\t\n\tstmt_list : stmt stmt_list\n\t\t\t  | stmt\n\t\n\tstmt : type varlist SEMICOLON\n\t\n\tstmt : assignlist SEMICOLON\n\t\n\tstmt : selection_stmt\n\t \n\tstmt : iteration_stmt \n\t\n\tassignlist : assignstmt COMMA assignlist \n\t\t\t\t| assignstmt\n\t\n\tassignstmt : starname EQUALS expression\n\t\t\t\t| name EQUALS expression\n\t\n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression DIVIDE expression\n\t\t\t\t| expression ASTERISK expression\n\t\t\t\t| expression PERCENTAGE expression\n\t\n\texpression : starname\n\t\t\t\t| andname\n\t\t\t\t| name\n\t\t\t\t| number\n\t\n\texpression : LPAREN expression RPAREN\n\t\n\ttype : INT\n\t\n\tstarname : ASTERISK name\n\t\n\tandname : AMPERSAND name\n\t\n\tnumber : NUMBER\n\t\n\tname : NAME\n\t\n\tvar : NAME\n\t\n\tvar1 : starname\n\t\n\tvar1 : ASTERISK var1\n\t\n\tvarlist : var COMMA varlist\n\t\t\t| var1 COMMA varlist\n\t\t\t| var\n\t\t\t| var1\n\t\n\texpression : MINUS expression %prec UMINUS\n\t\n\titeration_stmt : WHILE LPAREN condition_expression RPAREN brace_stmt\n\t\n\tbrace_stmt : stmt\n\t\t\t\t| LBRACE stmt_list RBRACE\n\t\n\tselection_stmt : IF LPAREN condition_expression RPAREN brace_stmt %prec IFX\n\t\t\t\t\t| IF LPAREN condition_expression RPAREN brace_stmt ELSE brace_stmt\n\t\n\tcondition_expression : assign_expr\n\t\n\tassign_expr : cond_expr\n\t\n\tcond_expr : log_or_expr\n\t\n\tlog_or_expr : log_and_expr\n\t\n\tlog_and_expr : incl_or_expr\n\t\t\t\t | log_and_expr AMPERSAND AMPERSAND incl_or_expr\n\t\t\t\t | log_and_expr EQUALS EQUALS incl_or_expr\n\t\n\tincl_or_expr : excl_or_expr\n\t\n\texcl_or_expr : and_expr\n\t\n\tand_expr : eq_expr\n\t\n\teq_expr : rel_expr\n\t\n\trel_expr : shift_expr\n\t\t\t | rel_expr EXCLAIM EQUALS shift_expr\n\t\t\t | rel_expr LTHAN shift_expr\n\t\t\t | rel_expr GTHAN shift_expr\n\t\t\t | rel_expr lthanequal shift_expr\n\t\t\t | rel_expr gthanequal shift_expr\n\t\n\tlthanequal : LTHAN EQUALS\n\t\n\tgthanequal : GTHAN EQUALS\n\t\n\tshift_expr : additive_expr\n\t\n\tadditive_expr : multiplicative_expr\n\t\t\t\t  | additive_expr PLUS multiplicative_expr\n\t\t\t\t  | additive_expr MINUS multiplicative_expr\n\t\n\tmultiplicative_expr : cast_expr\n\t\n\tcast_expr : expression\n\t'
    
_lr_action_items = {'EXCLAIM':([11,36,46,48,50,51,52,56,60,61,62,63,64,76,79,99,100,102,104,105,107,108,109,110,111,112,113,118,],[-30,-27,-24,-22,-21,-55,-64,-29,-67,-23,82,-63,-68,-38,-28,-25,-60,-58,-59,-57,-65,-66,-18,-19,-16,-20,-17,-56,]),'VOID':([0,],[1,]),'NUMBER':([32,33,34,39,49,59,81,83,84,85,86,87,88,89,90,91,92,97,98,101,103,106,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-62,-61,]),'WHILE':([6,13,16,19,41,70,75,93,94,95,96,114,119,120,121,],[12,-11,-10,12,-9,-8,12,12,-39,-40,12,-42,12,-41,-43,]),'MINUS':([11,32,33,34,36,39,46,48,49,50,52,56,59,60,61,63,64,68,69,76,79,80,81,83,84,85,86,87,88,89,90,91,92,97,98,99,101,103,106,107,108,109,110,111,112,113,],[-30,49,49,49,-27,49,-24,-22,49,-21,-64,-29,49,-67,-23,87,92,92,92,-38,-28,92,49,49,49,49,49,49,49,49,49,49,49,49,49,-25,49,-62,-61,-65,-66,-18,-19,-16,92,-17,]),'RBRACE':([13,16,19,22,37,41,70,94,95,114,115,120,121,],[-11,-10,-7,40,-6,-9,-8,-39,-40,-42,120,-41,-43,]),'RPAREN':([5,9,11,26,27,28,29,31,36,43,45,46,47,48,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,72,73,74,76,79,80,99,100,102,104,105,107,108,109,110,111,112,113,116,117,118,],[8,25,-30,-37,-31,-4,-32,-36,-27,-33,-45,-24,75,-22,-21,-55,-64,-44,-52,-47,-29,-53,-67,-23,-54,-63,-68,-48,-46,-51,93,-35,-34,-38,-28,99,-25,-60,-58,-59,-57,-65,-66,-18,-19,-16,-20,-17,-49,-50,-56,]),'SEMICOLON':([11,20,23,26,27,29,31,35,36,43,46,48,50,56,61,68,69,71,73,74,76,79,99,109,110,111,112,113,],[-30,-13,41,-37,-31,-32,-36,70,-27,-33,-24,-22,-21,-29,-23,-14,-15,-12,-35,-34,-38,-28,-25,-18,-19,-16,-20,-17,]),'PLUS':([11,36,46,48,50,52,56,60,61,63,64,68,69,76,79,80,99,107,108,109,110,111,112,113,],[-30,-27,-24,-22,-21,-64,-29,-67,-23,86,90,90,90,-38,-28,90,-25,-65,-66,-18,-19,-16,90,-17,]),'COMMA':([11,20,26,27,29,31,36,43,46,48,50,56,61,68,69,76,79,99,109,110,111,112,113,],[-30,38,42,-31,-32,44,-27,-33,-24,-22,-21,-29,-23,-14,-15,-38,-28,-25,-18,-19,-16,-20,-17,]),'PERCENTAGE':([11,36,46,48,50,56,61,64,68,69,76,79,80,99,109,110,111,112,113,],[-30,-27,-24,-22,-21,-29,-23,91,91,91,-38,-28,91,-25,-18,-19,-16,91,-17,]),'$end':([2,7,40,],[0,-1,-5,]),'DIVIDE':([11,36,46,48,50,56,61,64,68,69,76,79,80,99,109,110,111,112,113,],[-30,-27,-24,-22,-21,-29,-23,88,88,88,-38,-28,88,-25,-18,-19,88,88,88,]),'ASTERISK':([6,10,11,13,16,17,19,24,30,32,33,34,36,38,39,41,42,44,46,48,49,50,56,59,61,64,68,69,70,75,76,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,103,106,109,110,111,112,113,114,119,120,121,],[18,30,-30,-11,-10,30,18,-26,30,18,18,18,-27,18,18,-9,30,30,-24,-22,18,-21,-29,18,-23,89,89,89,-8,18,-38,-28,89,18,18,18,18,18,18,18,18,18,18,18,18,-39,-40,18,18,18,-25,18,-62,-61,-18,-19,89,89,89,-42,18,-41,-43,]),'EQUALS':([11,14,15,36,46,48,50,51,52,54,55,56,57,60,61,62,63,64,65,67,76,78,79,82,83,85,99,100,102,104,105,107,108,109,110,111,112,113,116,117,118,],[-30,33,34,-27,-24,-22,-21,-55,-64,-52,78,-29,-53,-67,-23,-54,-63,-68,-48,-51,-38,98,-28,101,103,106,-25,-60,-58,-59,-57,-65,-66,-18,-19,-16,-20,-17,-49,-50,-56,]),'ELSE':([13,16,41,70,94,95,114,120,121,],[-11,-10,-9,-8,-39,-40,119,-41,-43,]),'LTHAN':([11,36,46,48,50,51,52,56,60,61,62,63,64,76,79,99,100,102,104,105,107,108,109,110,111,112,113,118,],[-30,-27,-24,-22,-21,-55,-64,-29,-67,-23,85,-63,-68,-38,-28,-25,-60,-58,-59,-57,-65,-66,-18,-19,-16,-20,-17,-56,]),'AMPERSAND':([11,32,33,34,36,39,46,48,49,50,51,52,54,55,56,57,59,60,61,62,63,64,65,67,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,118,],[-30,58,58,58,-27,58,-24,-22,58,-21,-55,-64,-52,77,-29,-53,58,-67,-23,-54,-63,-68,-48,-51,-38,97,-28,58,58,58,58,58,58,58,58,58,58,58,58,58,-25,-60,58,-58,-62,-59,-57,-61,-65,-66,-18,-19,-16,-20,-17,-49,-50,-56,]),'LPAREN':([3,12,21,32,33,34,39,49,59,81,83,84,85,86,87,88,89,90,91,92,97,98,101,103,106,],[5,32,39,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-62,-61,]),'IF':([6,13,16,19,41,70,75,93,94,95,96,114,119,120,121,],[21,-11,-10,21,-9,-8,21,21,-39,-40,21,-42,21,-41,-43,]),'LBRACE':([4,8,25,75,93,119,],[6,-3,-2,96,96,96,]),'NAME':([5,6,10,13,16,17,18,19,24,30,32,33,34,38,39,41,42,44,49,58,59,70,75,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,103,106,114,119,120,121,],[10,11,27,-11,-10,27,11,11,-26,11,11,11,11,11,11,-9,27,27,11,11,11,-8,11,11,11,11,11,11,11,11,11,11,11,11,11,-39,-40,11,11,11,11,-62,-61,-42,11,-41,-43,]),'INT':([6,13,16,19,41,70,75,93,94,95,96,114,119,120,121,],[24,-11,-10,24,-9,-8,24,24,-39,-40,24,-42,24,-41,-43,]),'GTHAN':([11,36,46,48,50,51,52,56,60,61,62,63,64,76,79,99,100,102,104,105,107,108,109,110,111,112,113,118,],[-30,-27,-24,-22,-21,-55,-64,-29,-67,-23,83,-63,-68,-38,-28,-25,-60,-58,-59,-57,-65,-66,-18,-19,-16,-20,-17,-56,]),'MAIN':([1,],[3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'additive_expr':([32,39,81,83,84,85,97,98,101,],[63,63,63,63,63,63,63,63,63,]),'brace_stmt':([75,93,119,],[94,114,121,]),'number':([32,33,34,39,49,59,81,83,84,85,86,87,88,89,90,91,92,97,98,101,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'condition_expression':([32,39,],[47,72,]),'andname':([32,33,34,39,49,59,81,83,84,85,86,87,88,89,90,91,92,97,98,101,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'iteration_stmt':([6,19,75,93,96,119,],[13,13,13,13,13,13,]),'main_body':([4,],[7,]),'cast_expr':([32,39,81,83,84,85,86,87,97,98,101,],[60,60,60,60,60,60,60,60,60,60,60,]),'varlist':([10,17,42,44,],[28,35,73,74,]),'starname':([6,10,17,19,30,32,33,34,38,39,42,44,49,59,75,81,83,84,85,86,87,88,89,90,91,92,93,96,97,98,101,119,],[14,29,29,14,29,50,50,50,14,50,29,29,50,50,14,50,50,50,50,50,50,50,50,50,50,50,14,14,50,50,50,14,]),'shift_expr':([32,39,81,83,84,85,97,98,101,],[51,51,100,102,104,105,51,51,118,]),'cprog':([0,],[2,]),'multiplicative_expr':([32,39,81,83,84,85,86,87,97,98,101,],[52,52,52,52,52,52,107,108,52,52,52,]),'params':([5,],[9,]),'arguments':([3,],[4,]),'var':([10,17,42,44,],[31,31,31,31,]),'selection_stmt':([6,19,75,93,96,119,],[16,16,16,16,16,16,]),'type':([6,19,75,93,96,119,],[17,17,17,17,17,17,]),'and_expr':([32,39,97,98,],[54,54,54,54,]),'gthanequal':([62,],[81,]),'var1':([10,17,30,42,44,],[26,26,43,26,26,]),'assign_expr':([32,39,],[53,53,]),'stmt':([6,19,75,93,96,119,],[19,19,95,95,19,95,]),'assignstmt':([6,19,38,75,93,96,119,],[20,20,20,20,20,20,20,]),'eq_expr':([32,39,97,98,],[57,57,57,57,]),'log_and_expr':([32,39,],[55,55,]),'rel_expr':([32,39,97,98,],[62,62,62,62,]),'name':([6,18,19,30,32,33,34,38,39,49,58,59,75,81,83,84,85,86,87,88,89,90,91,92,93,96,97,98,101,119,],[15,36,15,36,61,61,61,15,61,61,79,61,15,61,61,61,61,61,61,61,61,61,61,61,15,15,61,61,61,15,]),'stmt_list':([6,19,96,],[22,37,115,]),'assignlist':([6,19,38,75,93,96,119,],[23,23,71,23,23,23,23,]),'excl_or_expr':([32,39,97,98,],[67,67,67,67,]),'incl_or_expr':([32,39,97,98,],[65,65,116,117,]),'cond_expr':([32,39,],[45,45,]),'lthanequal':([62,],[84,]),'log_or_expr':([32,39,],[66,66,]),'expression':([32,33,34,39,49,59,81,83,84,85,86,87,88,89,90,91,92,97,98,101,],[64,68,69,64,76,80,64,64,64,64,64,64,109,110,111,112,113,64,64,64,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cprog","S'",1,None,None,None),
  ('cprog -> VOID MAIN arguments main_body','cprog',4,'p_cprog','compiler.py',138),
  ('arguments -> LPAREN params RPAREN','arguments',3,'p_arguments','compiler.py',148),
  ('arguments -> LPAREN RPAREN','arguments',2,'p_arguments','compiler.py',149),
  ('params -> NAME varlist','params',2,'p_params','compiler.py',155),
  ('main_body -> LBRACE stmt_list RBRACE','main_body',3,'p_main_body','compiler.py',162),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','compiler.py',168),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','compiler.py',169),
  ('stmt -> type varlist SEMICOLON','stmt',3,'p_decl_stmt','compiler.py',175),
  ('stmt -> assignlist SEMICOLON','stmt',2,'p_stmt','compiler.py',184),
  ('stmt -> selection_stmt','stmt',1,'p_select_stmt','compiler.py',189),
  ('stmt -> iteration_stmt','stmt',1,'p_iterate_stmt','compiler.py',194),
  ('assignlist -> assignstmt COMMA assignlist','assignlist',3,'p_assignlist','compiler.py',199),
  ('assignlist -> assignstmt','assignlist',1,'p_assignlist','compiler.py',200),
  ('assignstmt -> starname EQUALS expression','assignstmt',3,'p_assignstmt','compiler.py',205),
  ('assignstmt -> name EQUALS expression','assignstmt',3,'p_assignstmt','compiler.py',206),
  ('expression -> expression PLUS expression','expression',3,'p_expression','compiler.py',221),
  ('expression -> expression MINUS expression','expression',3,'p_expression','compiler.py',222),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','compiler.py',223),
  ('expression -> expression ASTERISK expression','expression',3,'p_expression','compiler.py',224),
  ('expression -> expression PERCENTAGE expression','expression',3,'p_expression','compiler.py',225),
  ('expression -> starname','expression',1,'p_term_expression','compiler.py',249),
  ('expression -> andname','expression',1,'p_term_expression','compiler.py',250),
  ('expression -> name','expression',1,'p_term_expression','compiler.py',251),
  ('expression -> number','expression',1,'p_term_expression','compiler.py',252),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_paren_expression','compiler.py',258),
  ('type -> INT','type',1,'p_type','compiler.py',264),
  ('starname -> ASTERISK name','starname',2,'p_starname','compiler.py',270),
  ('andname -> AMPERSAND name','andname',2,'p_andname','compiler.py',279),
  ('number -> NUMBER','number',1,'p_num','compiler.py',288),
  ('name -> NAME','name',1,'p_name','compiler.py',296),
  ('var -> NAME','var',1,'p_var','compiler.py',307),
  ('var1 -> starname','var1',1,'p_var1','compiler.py',314),
  ('var1 -> ASTERISK var1','var1',2,'p_var2','compiler.py',321),
  ('varlist -> var COMMA varlist','varlist',3,'p_varlist','compiler.py',326),
  ('varlist -> var1 COMMA varlist','varlist',3,'p_varlist','compiler.py',327),
  ('varlist -> var','varlist',1,'p_varlist','compiler.py',328),
  ('varlist -> var1','varlist',1,'p_varlist','compiler.py',329),
  ('expression -> MINUS expression','expression',2,'p_uminus','compiler.py',335),
  ('iteration_stmt -> WHILE LPAREN condition_expression RPAREN brace_stmt','iteration_stmt',5,'p_iteration_stmt','compiler.py',350),
  ('brace_stmt -> stmt','brace_stmt',1,'p_brace_stmt','compiler.py',355),
  ('brace_stmt -> LBRACE stmt_list RBRACE','brace_stmt',3,'p_brace_stmt','compiler.py',356),
  ('selection_stmt -> IF LPAREN condition_expression RPAREN brace_stmt','selection_stmt',5,'p_selection_stmt','compiler.py',361),
  ('selection_stmt -> IF LPAREN condition_expression RPAREN brace_stmt ELSE brace_stmt','selection_stmt',7,'p_selection_stmt','compiler.py',362),
  ('condition_expression -> assign_expr','condition_expression',1,'p_condition_expression','compiler.py',367),
  ('assign_expr -> cond_expr','assign_expr',1,'p_assign_expr','compiler.py',372),
  ('cond_expr -> log_or_expr','cond_expr',1,'p_cond_expr','compiler.py',377),
  ('log_or_expr -> log_and_expr','log_or_expr',1,'p_log_or_expr','compiler.py',382),
  ('log_and_expr -> incl_or_expr','log_and_expr',1,'p_log_and_expr','compiler.py',387),
  ('log_and_expr -> log_and_expr AMPERSAND AMPERSAND incl_or_expr','log_and_expr',4,'p_log_and_expr','compiler.py',388),
  ('log_and_expr -> log_and_expr EQUALS EQUALS incl_or_expr','log_and_expr',4,'p_log_and_expr','compiler.py',389),
  ('incl_or_expr -> excl_or_expr','incl_or_expr',1,'p_incl_or_expr','compiler.py',394),
  ('excl_or_expr -> and_expr','excl_or_expr',1,'p_excl_or_expr','compiler.py',399),
  ('and_expr -> eq_expr','and_expr',1,'p_and_expr','compiler.py',404),
  ('eq_expr -> rel_expr','eq_expr',1,'p_eq_expr','compiler.py',409),
  ('rel_expr -> shift_expr','rel_expr',1,'p_rel_expr','compiler.py',414),
  ('rel_expr -> rel_expr EXCLAIM EQUALS shift_expr','rel_expr',4,'p_rel_expr','compiler.py',415),
  ('rel_expr -> rel_expr LTHAN shift_expr','rel_expr',3,'p_rel_expr','compiler.py',416),
  ('rel_expr -> rel_expr GTHAN shift_expr','rel_expr',3,'p_rel_expr','compiler.py',417),
  ('rel_expr -> rel_expr lthanequal shift_expr','rel_expr',3,'p_rel_expr','compiler.py',418),
  ('rel_expr -> rel_expr gthanequal shift_expr','rel_expr',3,'p_rel_expr','compiler.py',419),
  ('lthanequal -> LTHAN EQUALS','lthanequal',2,'p_lthanequal','compiler.py',424),
  ('gthanequal -> GTHAN EQUALS','gthanequal',2,'p_gthanequal','compiler.py',429),
  ('shift_expr -> additive_expr','shift_expr',1,'p_shift_expr','compiler.py',434),
  ('additive_expr -> multiplicative_expr','additive_expr',1,'p_additive_expr','compiler.py',439),
  ('additive_expr -> additive_expr PLUS multiplicative_expr','additive_expr',3,'p_additive_expr','compiler.py',440),
  ('additive_expr -> additive_expr MINUS multiplicative_expr','additive_expr',3,'p_additive_expr','compiler.py',441),
  ('multiplicative_expr -> cast_expr','multiplicative_expr',1,'p_multiplicative_expr','compiler.py',446),
  ('cast_expr -> expression','cast_expr',1,'p_cast_expr','compiler.py',451),
]
