
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftASTERISKDIVIDErightUMINUSnonassocIFXnonassocELSEleftLOGORleftLOGANDNAME NUMBER RPAREN LPAREN RBRACE LBRACE COMMA EQUAL INT FLOAT VOID MAIN ASTERISK SEMICOLON AMPERSAND PLUS MINUS DIVIDE WHILE IF EQUALS NOTEQUAL GREATER LESSER ELSE LOGOR LOGAND GREATEREQ LESSEREQ RETURN NUMBER2\n\tprogram_content :  function_dec program_content\n\t\t\t\t\t| function_body program_content \n\t\t\t\t\t| program program_content\n\t\n\tprogram_content : function_dec \n\t\t\t\t\t| function_body  \n\t\t\t\t\t| program \n\t\n\tprogram_content : declaration\n\t\n\tprogram_content : declaration program_content\n\t\n\tfunction_dec : datatype pointer LPAREN arguments RPAREN SEMICOLON\n\t\t\t\t| datatype namevar LPAREN arguments RPAREN SEMICOLON\n\t\n\tfunction_dec : datatype pointer LPAREN  RPAREN SEMICOLON\n\t\t\t| datatype namevar LPAREN  RPAREN SEMICOLON\n\t\n\targuments : datatype pointer\n\t\t\t\t| datatype namevar\n\t\n\targuments : datatype pointer COMMA arguments \n\t\t\t\t| datatype namevar COMMA arguments\n\t\n\tfunction_body : datatype pointer LPAREN arguments RPAREN LBRACE function_content return_stat RBRACE \n\t\t\t\t|  datatype namevar LPAREN arguments RPAREN LBRACE function_content return_stat RBRACE\n\t\n\tfunction_body : datatype pointer LPAREN  RPAREN LBRACE function_content return_stat RBRACE\n\t\t\t\t| datatype namevar LPAREN  RPAREN LBRACE function_content return_stat RBRACE \n\t\n\treturn_stat : RETURN pointer SEMICOLON\n\t\t\t\t| RETURN NAME SEMICOLON\n\t\t\t\t| RETURN SEMICOLON\n\t\n\tfunction_call : NAME LPAREN varlist RPAREN SEMICOLON\n\t\t\t\t\t| NAME LPAREN RPAREN SEMICOLON\n\n\t\n\tprogram : VOID MAIN LPAREN RPAREN LBRACE function_content RBRACE\n\t\n\tfunction_content :  assignment_statement\n\t\t\t\t| while_stat\n\t\t\t\t| if_stat\n\t\t\t\t| function_call\n\t\n\tfunction_content : assignment_statement function_content\n\t\t\t\t\t| while_stat function_content\n\t\t\t\t\t| if_stat function_content\n\t\t\t\t\t| function_call function_content\n\t\n\tfunction_content : declaration\n\t\n\tfunction_content :  declaration function_content\n\t\n\tdeclaration : datatype varlist SEMICOLON\n\t\n\tdatatype : INT\n\t\t\t | FLOAT\n\t\t\t | VOID\n\t\n\tnamevar : NAME\n\tvarlist : namevar COMMA varlist\n\t\t\t\t| pointer COMMA varlist\n\tvarlist : namevar\n\t\t\t\t| pointer\n\t\n\tpointer : ASTERISK pointer\n\t\t\t| ASTERISK namevar\n\tassignment_statement : ID EQUAL RIGHT SEMICOLON\n\t\t\t\t\t\t\t| LEFT EQUAL expression SEMICOLON\n\t\t\t\t\t\t\t| ID EQUAL function_call \n\t\t\t\t\t\t\t| LEFT EQUAL function_call \n\tID : NAMELEFT : ASTERISK varRIGHT : AMPERSAND var\n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression ASTERISK expression\n\t\t\t\t| expression DIVIDE expression\n\t\n\texpression : var\n\t\t\t| NUMBERvar\n\t\n\texpression :  LPAREN expression RPAREN\n\t\n\tNUMBERvar : NUMBER\n\t\n\tNUMBERvar : NUMBER2\n\t\n\tvar : ASTERISK var\n\t\t| AMPERSAND var\n\t\t| NAME\n\n\texpression : MINUS expression %prec UMINUS\n\tcode_block :  if_stat\n\t\t\t\t| while_stat\n\t\t\t\t| assignment_statement\n\tcode_block : LBRACE function_content RBRACEwhile_stat : WHILE LPAREN b_expression RPAREN code_blockif_stat : IF LPAREN b_expression RPAREN code_block %prec IFX\n\tif_stat : IF LPAREN b_expression RPAREN code_block ELSE code_block\n\t\n\tb_expression : expression sign1 expression\n\t\n\tb_expression : b_expression sign2 b_expression \n\tb_expression : LPAREN b_expression RPAREN\n\tsign1 : EQUALS\n\t\t|  NOTEQUAL\n\t\t|  GREATER\n\t\t|  LESSER\n\t\t|\tGREATEREQ\n\t\t| LESSEREQ\n\t\n\tsign2 : LOGOR\n\t\t\t| LOGAND\n\t'
    
_lr_action_items = {'LOGOR':([78,93,94,96,97,98,105,106,111,125,138,155,156,157,158,159,160,161,162,],[-66,-62,121,-60,-59,-63,-65,-64,121,121,-67,121,-77,-61,-58,-57,-55,-75,-56,]),'NOTEQUAL':([78,93,96,97,98,99,105,106,126,138,157,158,159,160,162,],[-66,-62,-60,-59,-63,127,-65,-64,127,-67,-61,-58,-57,-55,-56,]),'RETURN':([24,49,51,53,55,58,59,65,70,72,74,79,84,87,89,102,109,119,140,141,148,150,151,153,154,163,166,167,],[-37,-30,-27,-29,-35,83,-28,83,-34,-31,-33,-36,-32,83,83,-51,-50,-25,-49,-48,-24,-70,-68,-72,-69,-73,-71,-74,]),'VOID':([0,5,6,7,8,23,24,26,39,40,44,45,47,49,51,53,55,59,61,62,63,64,66,67,90,102,109,112,117,119,140,141,146,147,148,149,150,151,153,154,163,166,167,],[3,3,3,3,3,33,-37,33,33,-12,33,-11,33,33,33,33,33,33,33,33,33,-10,33,-9,-26,-51,-50,-20,-19,-25,-49,-48,-18,-17,-24,33,-70,-68,-72,-69,-73,-71,-74,]),'EQUAL':([48,52,56,75,78,105,106,152,],[-52,73,80,-53,-66,-65,-64,-52,]),'WHILE':([24,39,44,47,49,51,53,55,59,63,66,102,109,119,122,140,141,143,148,149,150,151,153,154,163,165,166,167,],[-37,50,50,50,50,50,50,50,50,50,50,-51,-50,-25,50,-49,-48,50,-24,50,-70,-68,-72,-69,-73,50,-71,-74,]),'GREATER':([78,93,96,97,98,99,105,106,126,138,157,158,159,160,162,],[-66,-62,-60,-59,-63,137,-65,-64,137,-67,-61,-58,-57,-55,-56,]),'MINUS':([71,73,78,81,93,95,96,97,98,99,100,101,103,104,105,106,121,123,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,157,158,159,160,161,162,],[100,100,-66,100,-62,100,-60,-59,-63,136,100,-66,100,136,-65,-64,-84,-85,100,136,-79,100,-83,100,-78,-81,-82,100,100,100,-80,-67,136,-61,-58,-57,-55,136,-56,]),'DIVIDE':([78,93,96,97,98,99,101,104,105,106,126,138,139,157,158,159,160,161,162,],[-66,-62,-60,-59,-63,128,-66,128,-65,-64,128,-67,128,-61,-58,-57,128,128,128,]),'RPAREN':([10,20,21,23,26,27,28,29,30,34,35,37,41,42,69,78,85,86,92,93,94,96,97,98,105,106,111,125,126,138,139,155,156,157,158,159,160,161,162,],[-41,-46,-47,31,36,38,-42,-44,-45,43,-43,46,-14,-13,91,-66,-16,-15,120,-62,122,-60,-59,-63,-65,-64,143,156,157,-67,157,-76,-77,-61,-58,-57,-55,-75,-56,]),'SEMICOLON':([10,12,13,14,20,21,28,29,30,31,35,36,43,46,78,83,91,93,96,97,98,101,104,105,106,107,113,115,120,138,142,157,158,159,160,162,],[-41,-44,24,-45,-46,-47,-42,-44,-45,40,-43,45,64,67,-66,114,119,-62,-60,-59,-63,-66,140,-65,-64,141,144,145,148,-67,-54,-61,-58,-57,-55,-56,]),'GREATEREQ':([78,93,96,97,98,99,105,106,126,138,157,158,159,160,162,],[-66,-62,-60,-59,-63,133,-65,-64,133,-67,-61,-58,-57,-55,-56,]),'COMMA':([10,12,14,20,21,29,30,41,42,],[-41,22,25,-46,-47,22,25,61,62,]),'PLUS':([78,93,96,97,98,99,101,104,105,106,126,138,139,157,158,159,160,161,162,],[-66,-62,-60,-59,-63,134,-66,134,-65,-64,134,-67,134,-61,-58,-57,-55,134,-56,]),'$end':([1,5,6,7,8,16,17,18,19,24,40,45,64,67,90,112,117,146,147,],[0,-4,-6,-7,-5,-1,-3,-8,-2,-37,-12,-11,-10,-9,-26,-20,-19,-18,-17,]),'RBRACE':([24,49,51,53,55,59,68,70,72,74,79,82,84,88,102,109,114,116,118,119,140,141,144,145,148,150,151,153,154,163,164,166,167,],[-37,-30,-27,-29,-35,-28,90,-34,-31,-33,-36,112,-32,117,-51,-50,-23,146,147,-25,-49,-48,-22,-21,-24,-70,-68,-72,-69,-73,166,-71,-74,]),'ASTERISK':([2,3,4,9,11,22,24,25,32,33,39,44,47,49,51,53,54,55,59,60,63,66,69,71,73,76,77,78,81,83,93,95,96,97,98,99,100,101,102,103,104,105,106,109,110,119,121,122,123,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,148,149,150,151,153,154,157,158,159,160,161,162,163,165,166,167,],[11,-40,-39,-38,11,11,-37,11,11,-40,54,54,54,54,54,54,77,54,54,11,54,54,11,77,77,77,77,-66,77,11,-62,77,-60,-59,-63,130,77,-66,-51,77,130,-65,-64,-50,77,-25,-84,54,-85,77,130,-79,77,-83,77,-78,-81,-82,77,77,77,-80,-67,130,-49,-48,54,-24,54,-70,-68,-72,-69,-61,-58,-57,130,130,130,-73,54,-71,-74,]),'EQUALS':([78,93,96,97,98,99,105,106,126,138,157,158,159,160,162,],[-66,-62,-60,-59,-63,131,-65,-64,131,-67,-61,-58,-57,-55,-56,]),'NUMBER':([71,73,81,95,100,103,121,123,124,127,128,129,130,131,132,133,134,135,136,137,],[93,93,93,93,93,93,-84,-85,93,-79,93,-83,93,-78,-81,-82,93,93,93,-80,]),'AMPERSAND':([54,71,73,76,77,80,81,95,100,103,110,121,123,124,127,128,129,130,131,132,133,134,135,136,137,],[76,76,76,76,76,110,76,76,76,76,76,-84,-85,76,-79,76,-83,76,-78,-81,-82,76,76,76,-80,]),'LPAREN':([10,12,14,15,20,21,48,50,57,71,73,81,95,100,101,103,108,121,123,124,127,128,129,130,131,132,133,134,135,136,137,],[-41,23,26,27,-46,-47,69,71,81,95,103,95,95,103,69,103,69,-84,-85,95,-79,103,-83,103,-78,-81,-82,103,103,103,-80,]),'ELSE':([102,109,119,140,141,148,150,151,153,154,163,166,167,],[-51,-50,-25,-49,-48,-24,-70,-68,-72,-69,165,-71,-74,]),'IF':([24,39,44,47,49,51,53,55,59,63,66,102,109,119,122,140,141,143,148,149,150,151,153,154,163,165,166,167,],[-37,57,57,57,57,57,57,57,57,57,57,-51,-50,-25,57,-49,-48,57,-24,57,-70,-68,-72,-69,-73,57,-71,-74,]),'LBRACE':([31,36,38,43,46,122,143,165,],[39,44,47,63,66,149,149,149,]),'NAME':([2,3,4,9,11,22,24,25,32,33,39,44,47,49,51,53,54,55,59,60,63,66,69,71,73,76,77,80,81,83,95,100,102,103,109,110,119,121,122,123,124,127,128,129,130,131,132,133,134,135,136,137,140,141,143,148,149,150,151,153,154,163,165,166,167,],[10,-40,-39,-38,10,10,-37,10,10,-40,48,48,48,48,48,48,78,48,48,10,48,48,10,78,101,78,78,108,78,113,78,78,-51,78,-50,78,-25,-84,152,-85,78,-79,78,-83,78,-78,-81,-82,78,78,78,-80,-49,-48,152,-24,48,-70,-68,-72,-69,-73,152,-71,-74,]),'LOGAND':([78,93,94,96,97,98,105,106,111,125,138,155,156,157,158,159,160,161,162,],[-66,-62,123,-60,-59,-63,-65,-64,123,123,-67,123,-77,-61,-58,-57,-55,-75,-56,]),'INT':([0,5,6,7,8,23,24,26,39,40,44,45,47,49,51,53,55,59,61,62,63,64,66,67,90,102,109,112,117,119,140,141,146,147,148,149,150,151,153,154,163,166,167,],[9,9,9,9,9,9,-37,9,9,-12,9,-11,9,9,9,9,9,9,9,9,9,-10,9,-9,-26,-51,-50,-20,-19,-25,-49,-48,-18,-17,-24,9,-70,-68,-72,-69,-73,-71,-74,]),'FLOAT':([0,5,6,7,8,23,24,26,39,40,44,45,47,49,51,53,55,59,61,62,63,64,66,67,90,102,109,112,117,119,140,141,146,147,148,149,150,151,153,154,163,166,167,],[4,4,4,4,4,4,-37,4,4,-12,4,-11,4,4,4,4,4,4,4,4,4,-10,4,-9,-26,-51,-50,-20,-19,-25,-49,-48,-18,-17,-24,4,-70,-68,-72,-69,-73,-71,-74,]),'LESSEREQ':([78,93,96,97,98,99,105,106,126,138,157,158,159,160,162,],[-66,-62,-60,-59,-63,129,-65,-64,129,-67,-61,-58,-57,-55,-56,]),'LESSER':([78,93,96,97,98,99,105,106,126,138,157,158,159,160,162,],[-66,-62,-60,-59,-63,132,-65,-64,132,-67,-61,-58,-57,-55,-56,]),'NUMBER2':([71,73,81,95,100,103,121,123,124,127,128,129,130,131,132,133,134,135,136,137,],[98,98,98,98,98,98,-84,-85,98,-79,98,-83,98,-78,-81,-82,98,98,98,-80,]),'MAIN':([3,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([0,5,6,7,8,39,44,47,49,51,53,55,59,63,66,149,],[7,7,7,7,7,55,55,55,55,55,55,55,55,55,55,55,]),'function_call':([39,44,47,49,51,53,55,59,63,66,73,80,149,],[49,49,49,49,49,49,49,49,49,49,102,109,49,]),'function_body':([0,5,6,7,8,],[8,8,8,8,8,]),'pointer':([2,11,22,25,32,60,69,83,],[14,20,30,30,42,30,30,115,]),'return_stat':([58,65,87,89,],[82,88,116,118,]),'varlist':([2,22,25,60,69,],[13,28,35,13,92,]),'assignment_statement':([39,44,47,49,51,53,55,59,63,66,122,143,149,165,],[51,51,51,51,51,51,51,51,51,51,150,150,51,150,]),'namevar':([2,11,22,25,32,60,69,],[12,21,29,29,41,29,29,]),'program':([0,5,6,7,8,],[6,6,6,6,6,]),'arguments':([23,26,61,62,],[34,37,85,86,]),'var':([54,71,73,76,77,81,95,100,103,110,124,128,130,134,135,136,],[75,97,97,105,106,97,97,97,97,142,97,97,97,97,97,97,]),'function_content':([39,44,47,49,51,53,55,59,63,66,149,],[58,65,68,70,72,74,79,84,87,89,164,]),'LEFT':([39,44,47,49,51,53,55,59,63,66,122,143,149,165,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'if_stat':([39,44,47,49,51,53,55,59,63,66,122,143,149,165,],[53,53,53,53,53,53,53,53,53,53,151,151,53,151,]),'function_dec':([0,5,6,7,8,],[5,5,5,5,5,]),'code_block':([122,143,165,],[153,163,167,]),'sign1':([99,126,],[135,135,]),'sign2':([94,111,125,155,],[124,124,124,124,]),'NUMBERvar':([71,73,81,95,100,103,124,128,130,134,135,136,],[96,96,96,96,96,96,96,96,96,96,96,96,]),'ID':([39,44,47,49,51,53,55,59,63,66,122,143,149,165,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'RIGHT':([80,],[107,]),'program_content':([0,5,6,7,8,],[1,16,17,18,19,]),'while_stat':([39,44,47,49,51,53,55,59,63,66,122,143,149,165,],[59,59,59,59,59,59,59,59,59,59,154,154,59,154,]),'datatype':([0,5,6,7,8,23,26,39,44,47,49,51,53,55,59,61,62,63,66,149,],[2,2,2,2,2,32,32,60,60,60,60,60,60,60,60,32,32,60,60,60,]),'b_expression':([71,81,95,124,],[94,111,125,155,]),'expression':([71,73,81,95,100,103,124,128,130,134,135,136,],[99,104,99,126,138,139,99,158,159,160,161,162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_content","S'",1,None,None,None),
  ('program_content -> function_dec program_content','program_content',2,'p_program_content','150050076-150050096.py',398),
  ('program_content -> function_body program_content','program_content',2,'p_program_content','150050076-150050096.py',399),
  ('program_content -> program program_content','program_content',2,'p_program_content','150050076-150050096.py',400),
  ('program_content -> function_dec','program_content',1,'p_program_content2','150050076-150050096.py',406),
  ('program_content -> function_body','program_content',1,'p_program_content2','150050076-150050096.py',407),
  ('program_content -> program','program_content',1,'p_program_content2','150050076-150050096.py',408),
  ('program_content -> declaration','program_content',1,'p_program_content3','150050076-150050096.py',415),
  ('program_content -> declaration program_content','program_content',2,'p_program_content4','150050076-150050096.py',427),
  ('function_dec -> datatype pointer LPAREN arguments RPAREN SEMICOLON','function_dec',6,'p_function_dec','150050076-150050096.py',440),
  ('function_dec -> datatype namevar LPAREN arguments RPAREN SEMICOLON','function_dec',6,'p_function_dec','150050076-150050096.py',441),
  ('function_dec -> datatype pointer LPAREN RPAREN SEMICOLON','function_dec',5,'p_function_dec2','150050076-150050096.py',452),
  ('function_dec -> datatype namevar LPAREN RPAREN SEMICOLON','function_dec',5,'p_function_dec2','150050076-150050096.py',453),
  ('arguments -> datatype pointer','arguments',2,'p_arguments','150050076-150050096.py',465),
  ('arguments -> datatype namevar','arguments',2,'p_arguments','150050076-150050096.py',466),
  ('arguments -> datatype pointer COMMA arguments','arguments',4,'p_arguments2','150050076-150050096.py',472),
  ('arguments -> datatype namevar COMMA arguments','arguments',4,'p_arguments2','150050076-150050096.py',473),
  ('function_body -> datatype pointer LPAREN arguments RPAREN LBRACE function_content return_stat RBRACE','function_body',9,'p_function_body','150050076-150050096.py',479),
  ('function_body -> datatype namevar LPAREN arguments RPAREN LBRACE function_content return_stat RBRACE','function_body',9,'p_function_body','150050076-150050096.py',480),
  ('function_body -> datatype pointer LPAREN RPAREN LBRACE function_content return_stat RBRACE','function_body',8,'p_function_body2','150050076-150050096.py',505),
  ('function_body -> datatype namevar LPAREN RPAREN LBRACE function_content return_stat RBRACE','function_body',8,'p_function_body2','150050076-150050096.py',506),
  ('return_stat -> RETURN pointer SEMICOLON','return_stat',3,'p_return','150050076-150050096.py',533),
  ('return_stat -> RETURN NAME SEMICOLON','return_stat',3,'p_return','150050076-150050096.py',534),
  ('return_stat -> RETURN SEMICOLON','return_stat',2,'p_return','150050076-150050096.py',535),
  ('function_call -> NAME LPAREN varlist RPAREN SEMICOLON','function_call',5,'p_func_call','150050076-150050096.py',540),
  ('function_call -> NAME LPAREN RPAREN SEMICOLON','function_call',4,'p_func_call','150050076-150050096.py',541),
  ('program -> VOID MAIN LPAREN RPAREN LBRACE function_content RBRACE','program',7,'p_program','150050076-150050096.py',548),
  ('function_content -> assignment_statement','function_content',1,'p_function_content','150050076-150050096.py',583),
  ('function_content -> while_stat','function_content',1,'p_function_content','150050076-150050096.py',584),
  ('function_content -> if_stat','function_content',1,'p_function_content','150050076-150050096.py',585),
  ('function_content -> function_call','function_content',1,'p_function_content','150050076-150050096.py',586),
  ('function_content -> assignment_statement function_content','function_content',2,'p_function_content2','150050076-150050096.py',596),
  ('function_content -> while_stat function_content','function_content',2,'p_function_content2','150050076-150050096.py',597),
  ('function_content -> if_stat function_content','function_content',2,'p_function_content2','150050076-150050096.py',598),
  ('function_content -> function_call function_content','function_content',2,'p_function_content2','150050076-150050096.py',599),
  ('function_content -> declaration','function_content',1,'p_function_content3','150050076-150050096.py',611),
  ('function_content -> declaration function_content','function_content',2,'p_function_content4','150050076-150050096.py',623),
  ('declaration -> datatype varlist SEMICOLON','declaration',3,'p_declaration','150050076-150050096.py',636),
  ('datatype -> INT','datatype',1,'p_datatype','150050076-150050096.py',652),
  ('datatype -> FLOAT','datatype',1,'p_datatype','150050076-150050096.py',653),
  ('datatype -> VOID','datatype',1,'p_datatype','150050076-150050096.py',654),
  ('namevar -> NAME','namevar',1,'p_namevar','150050076-150050096.py',660),
  ('varlist -> namevar COMMA varlist','varlist',3,'p_varlist1','150050076-150050096.py',667),
  ('varlist -> pointer COMMA varlist','varlist',3,'p_varlist1','150050076-150050096.py',668),
  ('varlist -> namevar','varlist',1,'p_varlist2','150050076-150050096.py',676),
  ('varlist -> pointer','varlist',1,'p_varlist2','150050076-150050096.py',677),
  ('pointer -> ASTERISK pointer','pointer',2,'p_pointer','150050076-150050096.py',685),
  ('pointer -> ASTERISK namevar','pointer',2,'p_pointer','150050076-150050096.py',686),
  ('assignment_statement -> ID EQUAL RIGHT SEMICOLON','assignment_statement',4,'p_assignment_statement','150050076-150050096.py',693),
  ('assignment_statement -> LEFT EQUAL expression SEMICOLON','assignment_statement',4,'p_assignment_statement','150050076-150050096.py',694),
  ('assignment_statement -> ID EQUAL function_call','assignment_statement',3,'p_assignment_statement','150050076-150050096.py',695),
  ('assignment_statement -> LEFT EQUAL function_call','assignment_statement',3,'p_assignment_statement','150050076-150050096.py',696),
  ('ID -> NAME','ID',1,'p_id','150050076-150050096.py',707),
  ('LEFT -> ASTERISK var','LEFT',2,'p_left','150050076-150050096.py',715),
  ('RIGHT -> AMPERSAND var','RIGHT',2,'p_right','150050076-150050096.py',723),
  ('expression -> expression PLUS expression','expression',3,'p_expression','150050076-150050096.py',733),
  ('expression -> expression MINUS expression','expression',3,'p_expression','150050076-150050096.py',734),
  ('expression -> expression ASTERISK expression','expression',3,'p_expression','150050076-150050096.py',735),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','150050076-150050096.py',736),
  ('expression -> var','expression',1,'p_expression2','150050076-150050096.py',779),
  ('expression -> NUMBERvar','expression',1,'p_expression2','150050076-150050096.py',780),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression3','150050076-150050096.py',787),
  ('NUMBERvar -> NUMBER','NUMBERvar',1,'p_numvar','150050076-150050096.py',793),
  ('NUMBERvar -> NUMBER2','NUMBERvar',1,'p_numvar2','150050076-150050096.py',803),
  ('var -> ASTERISK var','var',2,'p_var','150050076-150050096.py',813),
  ('var -> AMPERSAND var','var',2,'p_var','150050076-150050096.py',814),
  ('var -> NAME','var',1,'p_var','150050076-150050096.py',815),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','150050076-150050096.py',842),
  ('code_block -> if_stat','code_block',1,'p_code_block','150050076-150050096.py',854),
  ('code_block -> while_stat','code_block',1,'p_code_block','150050076-150050096.py',855),
  ('code_block -> assignment_statement','code_block',1,'p_code_block','150050076-150050096.py',856),
  ('code_block -> LBRACE function_content RBRACE','code_block',3,'p_code_block2','150050076-150050096.py',864),
  ('while_stat -> WHILE LPAREN b_expression RPAREN code_block','while_stat',5,'p_while','150050076-150050096.py',870),
  ('if_stat -> IF LPAREN b_expression RPAREN code_block','if_stat',5,'p_if1','150050076-150050096.py',879),
  ('if_stat -> IF LPAREN b_expression RPAREN code_block ELSE code_block','if_stat',7,'p_if2','150050076-150050096.py',889),
  ('b_expression -> expression sign1 expression','b_expression',3,'p_bool','150050076-150050096.py',900),
  ('b_expression -> b_expression sign2 b_expression','b_expression',3,'p_bool2','150050076-150050096.py',924),
  ('b_expression -> LPAREN b_expression RPAREN','b_expression',3,'p_bool_paren1','150050076-150050096.py',940),
  ('sign1 -> EQUALS','sign1',1,'p_sign','150050076-150050096.py',946),
  ('sign1 -> NOTEQUAL','sign1',1,'p_sign','150050076-150050096.py',947),
  ('sign1 -> GREATER','sign1',1,'p_sign','150050076-150050096.py',948),
  ('sign1 -> LESSER','sign1',1,'p_sign','150050076-150050096.py',949),
  ('sign1 -> GREATEREQ','sign1',1,'p_sign','150050076-150050096.py',950),
  ('sign1 -> LESSEREQ','sign1',1,'p_sign','150050076-150050096.py',951),
  ('sign2 -> LOGOR','sign2',1,'p_sign1','150050076-150050096.py',958),
  ('sign2 -> LOGAND','sign2',1,'p_sign1','150050076-150050096.py',959),
]
