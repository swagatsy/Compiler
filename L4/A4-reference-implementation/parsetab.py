
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftASTERISKDIVIDErightUMINUSnonassocIFXnonassocELSEleftLOGORleftLOGANDNAME NUMBER RPAREN LPAREN RBRACE LBRACE COMMA EQUAL INT FLOAT VOID MAIN ASTERISK SEMICOLON AMPERSAND PLUS MINUS DIVIDE WHILE IF EQUALS NOTEQUAL GREATER LESSER ELSE LOGOR LOGAND GREATEREQ LESSEREQ RETURN\n\tprogram_content : declaration program_content\n\t\t\t\t\t| function_dec program_content\n\t\t\t\t\t| function_body program_content \n\t\t\t\t\t| program program_content\n\t\n\tprogram_content : declaration \n\t\t\t\t\t| function_dec \n\t\t\t\t\t| function_body  \n\t\t\t\t\t| program \n\t\n\tfunction_dec : datatype pointer LPAREN arguments RPAREN SEMICOLON\n\t\n\targuments : datatype pointer\n\t\t\t\t| datatype pointer COMMA arguments \n\t\n\tfunction_body : datatype pointer LPAREN arguments RPAREN LBRACE function_content return_stat RBRACE \n\t\n\treturn_stat : RETURN pointer\n\t\t\t\t| RETURN NAME\n\t\n\tfunction_call : NAME LPAREN varlist RPAREN SEMICOLON\n\t\n\tprogram : VOID MAIN LPAREN RPAREN LBRACE function_content RBRACE\n\t\n\tfunction_content :  assignment_statement\n\t\t\t\t| while_stat\n\t\t\t\t| if_stat\n\t\t\t\t| function_call\n\t\n\tfunction_content : assignment_statement function_content\n\t\t\t\t\t| while_stat function_content\n\t\t\t\t\t| if_stat function_content\n\t\t\t\t\t| function_call function_content\n\t\n\tfunction_content : declaration\n\t\n\tfunction_content :  declaration function_content\n\tdeclaration : datatype varlist SEMICOLON\n\tdatatype : INT\n\t\t\t | FLOAT\n\tvarlist : NAME COMMA varlist\n\t\t\t\t| NAME\n\tvarlist : pointer COMMA varlist\n\t\t\t\t| pointer\n\t\n\tpointer : ASTERISK pointer\n\t\t\t| ASTERISK NAME\n\tassignment_statement : ID EQUAL RIGHT SEMICOLON\n\t\t\t\t\t\t\t| LEFT EQUAL expression SEMICOLON\n\t\t\t\t\t\t\t| ID EQUAL function_call \n\t\t\t\t\t\t\t| LEFT EQUAL function_call \n\tID : NAMELEFT : ASTERISK varRIGHT : AMPERSAND var\n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression ASTERISK expression\n\t\t\t\t| expression DIVIDE expression\n\t\n\texpression : var\n\t\t\t| NUMBERvar\n\t\n\texpression :  LPAREN expression RPAREN\n\t\n\tNUMBERvar : NUMBER\n\t\n\tvar : ASTERISK var\n\t\t| AMPERSAND var\n\t\t| NAME\n\n\texpression : MINUS expression %prec UMINUS\n\tcode_block :  if_stat\n\t\t\t\t| while_stat\n\t\t\t\t| assignment_statement\n\tcode_block : LBRACE function_content RBRACEwhile_stat : WHILE LPAREN b_expression RPAREN code_blockif_stat : IF LPAREN b_expression RPAREN code_block %prec IFX\n\tif_stat : IF LPAREN b_expression RPAREN code_block ELSE code_block\n\t\n\tb_expression : expression sign1 expression\n\t\n\tb_expression : b_expression sign2 b_expression \n\tb_expression : LPAREN b_expression RPAREN\n\tsign1 : EQUALS\n\t\t|  NOTEQUAL\n\t\t|  GREATER\n\t\t|  LESSER\n\t\t|\tGREATEREQ\n\t\t| LESSEREQ\n\t\n\tsign2 : LOGOR\n\t\t\t| LOGAND\n\t'
    
_lr_action_items = {'LOGOR':([62,71,72,74,75,82,83,88,97,110,123,124,125,126,127,128,129,130,],[-53,-50,93,-48,-47,-52,-51,93,93,-54,93,-64,-49,-46,-45,-43,-62,-44,]),'NOTEQUAL':([62,71,74,75,76,82,83,98,110,125,126,127,128,130,],[-53,-50,-48,-47,99,-52,-51,99,-54,-49,-46,-45,-43,-44,]),'RETURN':([22,39,41,43,45,49,52,54,56,58,63,67,79,86,112,113,116,118,119,121,122,131,134,135,],[-27,-20,-17,-19,-25,-18,69,-24,-21,-23,-26,-22,-39,-38,-37,-36,-15,-57,-55,-59,-56,-60,-58,-61,]),'VOID':([0,5,6,7,8,22,37,66,89,],[3,3,3,3,3,-27,-9,-16,-12,]),'EQUAL':([38,42,46,59,62,82,83,120,],[-40,57,64,-41,-53,-52,-51,-40,]),'WHILE':([22,34,36,39,41,43,45,49,79,86,94,112,113,115,116,117,118,119,121,122,131,133,134,135,],[-27,40,40,40,40,40,40,40,-39,-38,40,-37,-36,40,-15,40,-57,-55,-59,-56,-60,40,-58,-61,]),'GREATER':([62,71,74,75,76,82,83,98,110,125,126,127,128,130,],[-53,-50,-48,-47,109,-52,-51,109,-54,-49,-46,-45,-43,-44,]),'MINUS':([55,57,62,65,71,73,74,75,76,77,78,80,81,82,83,93,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,125,126,127,128,129,130,],[77,77,-53,77,-50,77,-48,-47,108,77,-53,77,108,-52,-51,-71,-72,77,108,-66,77,-70,77,-65,-68,-69,77,77,77,-67,-54,108,-49,-46,-45,-43,108,-44,]),'DIVIDE':([62,71,74,75,76,78,81,82,83,98,110,111,125,126,127,128,129,130,],[-53,-50,-48,-47,100,-53,100,-52,-51,100,-54,100,-49,-46,-45,100,100,100,]),'RPAREN':([10,20,21,25,26,27,28,30,32,51,62,70,71,72,74,75,82,83,88,97,98,110,111,123,124,125,126,127,128,129,130,],[-31,-34,-35,31,-30,-33,-32,33,-10,-11,-53,92,-50,94,-48,-47,-52,-51,115,124,125,-54,125,-63,-64,-49,-46,-45,-43,-62,-44,]),'SEMICOLON':([10,12,13,20,21,26,27,28,33,62,71,74,75,78,81,82,83,84,92,110,114,125,126,127,128,130,],[-31,22,-33,-34,-35,-30,-33,-32,37,-53,-50,-48,-47,-53,112,-52,-51,113,116,-54,-42,-49,-46,-45,-43,-44,]),'GREATEREQ':([62,71,74,75,76,82,83,98,110,125,126,127,128,130,],[-53,-50,-48,-47,105,-52,-51,105,-54,-49,-46,-45,-43,-44,]),'COMMA':([10,13,20,21,27,32,],[19,23,-34,-35,23,35,]),'PLUS':([62,71,74,75,76,78,81,82,83,98,110,111,125,126,127,128,129,130,],[-53,-50,-48,-47,106,-53,106,-52,-51,106,-54,106,-49,-46,-45,-43,106,-44,]),'$end':([1,5,6,7,8,15,16,17,18,22,37,66,89,],[0,-6,-8,-5,-7,-2,-4,-1,-3,-27,-9,-16,-12,]),'RBRACE':([20,21,22,39,41,43,45,48,49,54,56,58,63,67,68,79,86,90,91,112,113,116,118,119,121,122,131,132,134,135,],[-34,-35,-27,-20,-17,-19,-25,66,-18,-24,-21,-23,-26,-22,89,-39,-38,-13,-14,-37,-36,-15,-57,-55,-59,-56,-60,134,-58,-61,]),'ASTERISK':([2,4,9,11,19,22,23,29,34,36,39,41,43,44,45,49,50,53,55,57,60,61,62,65,69,71,73,74,75,76,77,78,79,80,81,82,83,86,87,93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,121,122,125,126,127,128,129,130,131,133,134,135,],[11,-29,-28,11,11,-27,11,11,44,44,44,44,44,61,44,44,11,11,61,61,61,61,-53,61,11,-50,61,-48,-47,102,61,-53,-39,61,102,-52,-51,-38,61,-71,44,-72,61,102,-66,61,-70,61,-65,-68,-69,61,61,61,-67,-54,102,-37,-36,44,-15,44,-57,-55,-59,-56,-49,-46,-45,102,102,102,-60,44,-58,-61,]),'EQUALS':([62,71,74,75,76,82,83,98,110,125,126,127,128,130,],[-53,-50,-48,-47,103,-52,-51,103,-54,-49,-46,-45,-43,-44,]),'NUMBER':([55,57,65,73,77,80,93,95,96,99,100,101,102,103,104,105,106,107,108,109,],[71,71,71,71,71,71,-71,-72,71,-66,71,-70,71,-65,-68,-69,71,71,71,-67,]),'AMPERSAND':([44,55,57,60,61,64,65,73,77,80,87,93,95,96,99,100,101,102,103,104,105,106,107,108,109,],[60,60,60,60,60,87,60,60,60,60,60,-71,-72,60,-66,60,-70,60,-65,-68,-69,60,60,60,-67,]),'LPAREN':([13,14,20,21,38,40,47,55,57,65,73,77,78,80,85,93,95,96,99,100,101,102,103,104,105,106,107,108,109,],[24,25,-34,-35,53,55,65,73,80,73,73,80,53,80,53,-71,-72,73,-66,80,-70,80,-65,-68,-69,80,80,80,-67,]),'ELSE':([79,86,112,113,116,118,119,121,122,131,134,135,],[-39,-38,-37,-36,-15,-57,-55,-59,-56,133,-58,-61,]),'IF':([22,34,36,39,41,43,45,49,79,86,94,112,113,115,116,117,118,119,121,122,131,133,134,135,],[-27,47,47,47,47,47,47,47,-39,-38,47,-37,-36,47,-15,47,-57,-55,-59,-56,-60,47,-58,-61,]),'LBRACE':([31,33,94,115,133,],[34,36,117,117,117,]),'NAME':([2,4,9,11,19,22,23,34,36,39,41,43,44,45,49,50,53,55,57,60,61,64,65,69,73,77,79,80,86,87,93,94,95,96,99,100,101,102,103,104,105,106,107,108,109,112,113,115,116,117,118,119,121,122,131,133,134,135,],[10,-29,-28,21,10,-27,10,38,38,38,38,38,62,38,38,10,10,62,78,62,62,85,62,91,62,62,-39,62,-38,62,-71,120,-72,62,-66,62,-70,62,-65,-68,-69,62,62,62,-67,-37,-36,120,-15,38,-57,-55,-59,-56,-60,120,-58,-61,]),'LOGAND':([62,71,72,74,75,82,83,88,97,110,123,124,125,126,127,128,129,130,],[-53,-50,95,-48,-47,-52,-51,95,95,-54,95,-64,-49,-46,-45,-43,-62,-44,]),'INT':([0,5,6,7,8,22,24,34,35,36,37,39,41,43,45,49,66,79,86,89,112,113,116,117,118,119,121,122,131,134,135,],[9,9,9,9,9,-27,9,9,9,9,-9,9,9,9,9,9,-16,-39,-38,-12,-37,-36,-15,9,-57,-55,-59,-56,-60,-58,-61,]),'FLOAT':([0,5,6,7,8,22,24,34,35,36,37,39,41,43,45,49,66,79,86,89,112,113,116,117,118,119,121,122,131,134,135,],[4,4,4,4,4,-27,4,4,4,4,-9,4,4,4,4,4,-16,-39,-38,-12,-37,-36,-15,4,-57,-55,-59,-56,-60,-58,-61,]),'LESSEREQ':([62,71,74,75,76,82,83,98,110,125,126,127,128,130,],[-53,-50,-48,-47,101,-52,-51,101,-54,-49,-46,-45,-43,-44,]),'LESSER':([62,71,74,75,76,82,83,98,110,125,126,127,128,130,],[-53,-50,-48,-47,104,-52,-51,104,-54,-49,-46,-45,-43,-44,]),'MAIN':([3,],[14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([0,5,6,7,8,34,36,39,41,43,45,49,117,],[7,7,7,7,7,45,45,45,45,45,45,45,45,]),'function_call':([34,36,39,41,43,45,49,57,64,117,],[39,39,39,39,39,39,39,79,86,39,]),'function_body':([0,5,6,7,8,],[8,8,8,8,8,]),'pointer':([2,11,19,23,29,50,53,69,],[13,20,27,27,32,27,27,90,]),'return_stat':([52,],[68,]),'varlist':([2,19,23,50,53,],[12,26,28,12,70,]),'assignment_statement':([34,36,39,41,43,45,49,94,115,117,133,],[41,41,41,41,41,41,41,118,118,41,118,]),'program':([0,5,6,7,8,],[6,6,6,6,6,]),'arguments':([24,35,],[30,51,]),'var':([44,55,57,60,61,65,73,77,80,87,96,100,102,106,107,108,],[59,75,75,82,83,75,75,75,75,114,75,75,75,75,75,75,]),'function_content':([34,36,39,41,43,45,49,117,],[48,52,54,56,58,63,67,132,]),'LEFT':([34,36,39,41,43,45,49,94,115,117,133,],[42,42,42,42,42,42,42,42,42,42,42,]),'if_stat':([34,36,39,41,43,45,49,94,115,117,133,],[43,43,43,43,43,43,43,119,119,43,119,]),'function_dec':([0,5,6,7,8,],[5,5,5,5,5,]),'code_block':([94,115,133,],[121,131,135,]),'sign1':([76,98,],[107,107,]),'sign2':([72,88,97,123,],[96,96,96,96,]),'NUMBERvar':([55,57,65,73,77,80,96,100,102,106,107,108,],[74,74,74,74,74,74,74,74,74,74,74,74,]),'ID':([34,36,39,41,43,45,49,94,115,117,133,],[46,46,46,46,46,46,46,46,46,46,46,]),'RIGHT':([64,],[84,]),'program_content':([0,5,6,7,8,],[1,15,16,17,18,]),'while_stat':([34,36,39,41,43,45,49,94,115,117,133,],[49,49,49,49,49,49,49,122,122,49,122,]),'datatype':([0,5,6,7,8,24,34,35,36,39,41,43,45,49,117,],[2,2,2,2,2,29,50,29,50,50,50,50,50,50,50,]),'b_expression':([55,65,73,96,],[72,88,97,123,]),'expression':([55,57,65,73,77,80,96,100,102,106,107,108,],[76,81,76,98,110,111,76,126,127,128,129,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_content","S'",1,None,None,None),
  ('program_content -> declaration program_content','program_content',2,'p_program_content','150050076-150050096.py',370),
  ('program_content -> function_dec program_content','program_content',2,'p_program_content','150050076-150050096.py',371),
  ('program_content -> function_body program_content','program_content',2,'p_program_content','150050076-150050096.py',372),
  ('program_content -> program program_content','program_content',2,'p_program_content','150050076-150050096.py',373),
  ('program_content -> declaration','program_content',1,'p_program_content2','150050076-150050096.py',379),
  ('program_content -> function_dec','program_content',1,'p_program_content2','150050076-150050096.py',380),
  ('program_content -> function_body','program_content',1,'p_program_content2','150050076-150050096.py',381),
  ('program_content -> program','program_content',1,'p_program_content2','150050076-150050096.py',382),
  ('function_dec -> datatype pointer LPAREN arguments RPAREN SEMICOLON','function_dec',6,'p_function_dec','150050076-150050096.py',388),
  ('arguments -> datatype pointer','arguments',2,'p_arguments','150050076-150050096.py',394),
  ('arguments -> datatype pointer COMMA arguments','arguments',4,'p_arguments','150050076-150050096.py',395),
  ('function_body -> datatype pointer LPAREN arguments RPAREN LBRACE function_content return_stat RBRACE','function_body',9,'p_function_body','150050076-150050096.py',400),
  ('return_stat -> RETURN pointer','return_stat',2,'p_return','150050076-150050096.py',405),
  ('return_stat -> RETURN NAME','return_stat',2,'p_return','150050076-150050096.py',406),
  ('function_call -> NAME LPAREN varlist RPAREN SEMICOLON','function_call',5,'p_func_call','150050076-150050096.py',411),
  ('program -> VOID MAIN LPAREN RPAREN LBRACE function_content RBRACE','program',7,'p_program','150050076-150050096.py',416),
  ('function_content -> assignment_statement','function_content',1,'p_function_content','150050076-150050096.py',432),
  ('function_content -> while_stat','function_content',1,'p_function_content','150050076-150050096.py',433),
  ('function_content -> if_stat','function_content',1,'p_function_content','150050076-150050096.py',434),
  ('function_content -> function_call','function_content',1,'p_function_content','150050076-150050096.py',435),
  ('function_content -> assignment_statement function_content','function_content',2,'p_function_content2','150050076-150050096.py',441),
  ('function_content -> while_stat function_content','function_content',2,'p_function_content2','150050076-150050096.py',442),
  ('function_content -> if_stat function_content','function_content',2,'p_function_content2','150050076-150050096.py',443),
  ('function_content -> function_call function_content','function_content',2,'p_function_content2','150050076-150050096.py',444),
  ('function_content -> declaration','function_content',1,'p_function_content3','150050076-150050096.py',453),
  ('function_content -> declaration function_content','function_content',2,'p_function_content4','150050076-150050096.py',459),
  ('declaration -> datatype varlist SEMICOLON','declaration',3,'p_declaration','150050076-150050096.py',465),
  ('datatype -> INT','datatype',1,'p_datatype','150050076-150050096.py',476),
  ('datatype -> FLOAT','datatype',1,'p_datatype','150050076-150050096.py',477),
  ('varlist -> NAME COMMA varlist','varlist',3,'p_statlist','150050076-150050096.py',481),
  ('varlist -> NAME','varlist',1,'p_statlist','150050076-150050096.py',482),
  ('varlist -> pointer COMMA varlist','varlist',3,'p_pointerlist','150050076-150050096.py',488),
  ('varlist -> pointer','varlist',1,'p_pointerlist','150050076-150050096.py',489),
  ('pointer -> ASTERISK pointer','pointer',2,'p_pointer','150050076-150050096.py',496),
  ('pointer -> ASTERISK NAME','pointer',2,'p_pointer','150050076-150050096.py',497),
  ('assignment_statement -> ID EQUAL RIGHT SEMICOLON','assignment_statement',4,'p_assignment_statement','150050076-150050096.py',502),
  ('assignment_statement -> LEFT EQUAL expression SEMICOLON','assignment_statement',4,'p_assignment_statement','150050076-150050096.py',503),
  ('assignment_statement -> ID EQUAL function_call','assignment_statement',3,'p_assignment_statement','150050076-150050096.py',504),
  ('assignment_statement -> LEFT EQUAL function_call','assignment_statement',3,'p_assignment_statement','150050076-150050096.py',505),
  ('ID -> NAME','ID',1,'p_id','150050076-150050096.py',516),
  ('LEFT -> ASTERISK var','LEFT',2,'p_left','150050076-150050096.py',524),
  ('RIGHT -> AMPERSAND var','RIGHT',2,'p_right','150050076-150050096.py',532),
  ('expression -> expression PLUS expression','expression',3,'p_expression','150050076-150050096.py',542),
  ('expression -> expression MINUS expression','expression',3,'p_expression','150050076-150050096.py',543),
  ('expression -> expression ASTERISK expression','expression',3,'p_expression','150050076-150050096.py',544),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','150050076-150050096.py',545),
  ('expression -> var','expression',1,'p_expression2','150050076-150050096.py',588),
  ('expression -> NUMBERvar','expression',1,'p_expression2','150050076-150050096.py',589),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression3','150050076-150050096.py',596),
  ('NUMBERvar -> NUMBER','NUMBERvar',1,'p_numvar','150050076-150050096.py',602),
  ('var -> ASTERISK var','var',2,'p_var','150050076-150050096.py',612),
  ('var -> AMPERSAND var','var',2,'p_var','150050076-150050096.py',613),
  ('var -> NAME','var',1,'p_var','150050076-150050096.py',614),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','150050076-150050096.py',641),
  ('code_block -> if_stat','code_block',1,'p_code_block','150050076-150050096.py',653),
  ('code_block -> while_stat','code_block',1,'p_code_block','150050076-150050096.py',654),
  ('code_block -> assignment_statement','code_block',1,'p_code_block','150050076-150050096.py',655),
  ('code_block -> LBRACE function_content RBRACE','code_block',3,'p_code_block2','150050076-150050096.py',663),
  ('while_stat -> WHILE LPAREN b_expression RPAREN code_block','while_stat',5,'p_while','150050076-150050096.py',669),
  ('if_stat -> IF LPAREN b_expression RPAREN code_block','if_stat',5,'p_if1','150050076-150050096.py',678),
  ('if_stat -> IF LPAREN b_expression RPAREN code_block ELSE code_block','if_stat',7,'p_if2','150050076-150050096.py',688),
  ('b_expression -> expression sign1 expression','b_expression',3,'p_bool','150050076-150050096.py',699),
  ('b_expression -> b_expression sign2 b_expression','b_expression',3,'p_bool2','150050076-150050096.py',723),
  ('b_expression -> LPAREN b_expression RPAREN','b_expression',3,'p_bool_paren1','150050076-150050096.py',739),
  ('sign1 -> EQUALS','sign1',1,'p_sign','150050076-150050096.py',745),
  ('sign1 -> NOTEQUAL','sign1',1,'p_sign','150050076-150050096.py',746),
  ('sign1 -> GREATER','sign1',1,'p_sign','150050076-150050096.py',747),
  ('sign1 -> LESSER','sign1',1,'p_sign','150050076-150050096.py',748),
  ('sign1 -> GREATEREQ','sign1',1,'p_sign','150050076-150050096.py',749),
  ('sign1 -> LESSEREQ','sign1',1,'p_sign','150050076-150050096.py',750),
  ('sign2 -> LOGOR','sign2',1,'p_sign1','150050076-150050096.py',757),
  ('sign2 -> LOGAND','sign2',1,'p_sign1','150050076-150050096.py',758),
]
